name: auto test

on: 
  push:
    branches:
      - add_deploy_ci

  # pull_request:
  #   branches:
  #     - main
    # paths:
    #   - 'server/**'
    #   - 'message/**'
#   release:
#     branches: 
#       - main
#       - release-*
env:
  IMAGE: "deepflow-server"

jobs:
  build_auto_test_server:
    name: build auto test server
    runs-on: [self-hosted, 16c16g]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0

      - name: get changes
        run: |
          SERVER_CHANGE_COUNT=$(git diff-tree --no-commit-id --name-only --diff-filter=AMR -r HEAD |grep ^server/|wc -l)
          AGENT_CHANGE_COUNT=$(git diff-tree --no-commit-id --name-only --diff-filter=AMR -r HEAD |grep ^agent/|wc -l)
          MESSAGE_CHANGE_COUNT=$(git diff-tree --no-commit-id --name-only --diff-filter=AMR -r HEAD |grep ^message/|wc -l)
          if [ "${SERVER_CHANGE_COUNT}" -gt "0" ] 
            then  
              echo "SERVER_CHANGE=true" >> $GITHUB_ENV
          fi 
          if [ "${AGENT_CHANGE_COUNT}" -gt "0" ] 
            then  
              echo "AGENT_CHANGE=true" >> $GITHUB_ENV
          fi 
          if [ "${MESSAGE_CHANGE_COUNT}" -gt "0" ] 
            then  
              echo "SERVER_CHANGE=true" >> $GITHUB_ENV
              echo "AGENT_CHANGE=true" >> $GITHUB_ENV
          fi 

      - name: Set up Go
        if: ${{ env.SERVER_CHANGE == 'true' }}
        uses: actions/setup-go@master
        with:
          go-version: 1.18.x

      - name: Install Protoc
        if: ${{ env.SERVER_CHANGE == 'true' }}
        uses: arduino/setup-protoc@v1
        with:
          version: '3.6.1'
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: build server
        if: ${{ env.SERVER_CHANGE == 'true' }}
        run: |
          sudo apt-get update
          sudo apt-get install tmpl
          pip install ujson
          GO111MODULE="off" go get github.com/gogo/protobuf/protoc-gen-gofast
          GO111MODULE="off" go get github.com/gogo/protobuf/proto
          GO111MODULE="off" go get github.com/gogo/protobuf/jsonpb
          GO111MODULE="off" go get github.com/gogo/protobuf/protoc-gen-gogo
          GO111MODULE="off" go get github.com/gogo/protobuf/gogoproto
          GO111MODULE="off" go get github.com/golang/protobuf/protoc-gen-go
          cd server
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 make -e BINARY_SUFFIX=.amd64

      - name: Package code build results
        if: ${{ env.SERVER_CHANGE == 'true' }}
        run: |
          tar cvf server-artifact.tar server/bin/

      - name: Archive code build results packager
        if: ${{ env.SERVER_CHANGE == 'true' }}
        uses: actions/upload-artifact@v3
        with:
          name: build results
          path: |
            server-artifact.tar

  build_server_auto_test_image:
    name: build server auto test image
    needs: [build_auto_test_server]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0

      - name: get changes
        run: |
          SERVER_CHANGE_COUNT=$(git diff-tree --no-commit-id --name-only --diff-filter=AMR -r HEAD |grep ^server/|wc -l)
          AGENT_CHANGE_COUNT=$(git diff-tree --no-commit-id --name-only --diff-filter=AMR -r HEAD |grep ^agent/|wc -l)
          MESSAGE_CHANGE_COUNT=$(git diff-tree --no-commit-id --name-only --diff-filter=AMR -r HEAD |grep ^message/|wc -l)
          if [ "${SERVER_CHANGE_COUNT}" -gt "0" ] 
            then  
              echo "SERVER_CHANGE=true" >> $GITHUB_ENV
          fi 
          if [ "${AGENT_CHANGE_COUNT}" -gt "0" ] 
            then  
              echo "AGENT_CHANGE=true" >> $GITHUB_ENV
          fi 
          if [ "${MESSAGE_CHANGE_COUNT}" -gt "0" ] 
            then  
              echo "SERVER_CHANGE=true" >> $GITHUB_ENV
              echo "AGENT_CHANGE=true" >> $GITHUB_ENV
          fi 

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        if: ${{ env.SERVER_CHANGE == 'true' }}
        with:
          install: true

      - name: Download code build results
        uses: actions/download-artifact@v3
        if: ${{ env.SERVER_CHANGE == 'true' }}
        with:
          name: build results
          path: .

      - name: Unpack code build results
        if: ${{ env.SERVER_CHANGE == 'true' }}
        run: |
          tar xvf server-artifact.tar

      - name: Log in to GitHub Docker Registry
        uses: docker/login-action@v2
        if: ${{ env.SERVER_CHANGE == 'true' }}
        with:
          registry: "ghcr.io" 
          username: "${{ github.repository_owner }}"
          password: "${{ secrets.GITHUB_TOKEN }}" 

      - name: Build and push deepflow images
        if: ${{ env.SERVER_CHANGE == 'true' }}
        uses: docker/build-push-action@v2
        with:
          context: server
          push: true 
          file: server/Dockerfile
          platforms: linux/amd64
          tags: |
            "ghcr.io/${{ github.repository_owner }}/deepflow-ce/${{ env.IMAGE }}:${{ github.run_id }}"

  auto_test_install:
    name: auto test install
    needs: [build_server_auto_test_image]
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0

      - name: get changes
        run: |
          SERVER_CHANGE_COUNT=$(git diff-tree --no-commit-id --name-only --diff-filter=AMR -r HEAD |grep ^server/|wc -l)
          AGENT_CHANGE_COUNT=$(git diff-tree --no-commit-id --name-only --diff-filter=AMR -r HEAD |grep ^agent/|wc -l)
          MESSAGE_CHANGE_COUNT=$(git diff-tree --no-commit-id --name-only --diff-filter=AMR -r HEAD |grep ^message/|wc -l)
          if [ "${SERVER_CHANGE_COUNT}" -gt "0" ] 
            then  
              echo "SERVER_CHANGE=true" >> $GITHUB_ENV
          fi 
          if [ "${AGENT_CHANGE_COUNT}" -gt "0" ] 
            then  
              echo "AGENT_CHANGE=true" >> $GITHUB_ENV
          fi 
          if [ "${MESSAGE_CHANGE_COUNT}" -gt "0" ] 
            then  
              echo "SERVER_CHANGE=true" >> $GITHUB_ENV
              echo "AGENT_CHANGE=true" >> $GITHUB_ENV
          fi 

      # - name: start minikube
      #   uses: medyagh/setup-minikube@master
      #   with:
      #     minikube-version: 1.24.0
      #     driver: docker
      #     container-runtime: containerd
      #     kubernetes-version: v1.22.3
      #     memory: 4000m
      #     cni: bridge
      - name: Setup Minikube
        uses: manusa/actions-setup-minikube@v2.6.1
        with:
          minikube version: 'v1.26.0'
          kubernetes version: 'v1.24.1'
          github token: ${{ secrets.GITHUB_TOKEN }}
      - name: Interact with the cluster
        run: |
          kubectl get nodes
          kubectl get sc
      # - name: Create k8s Kind Cluster
      #   uses: helm/kind-action@v1.3.0
      # - name: Testing
      #   run: |
      #     kubectl cluster-info
      #     kubectl get pods -n kube-system
      #     kubectl get sc
      #     echo "current-context:" $(kubectl config current-context)
      #     echo "environment-kubeconfig:" ${KUBECONFIG}

      - name: Install Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.8.1

      - name: install deepflow
        run: |
          helm repo add deepflow https://deepflowys.github.io/deepflow
          helm repo update deepflow 
          helm install deepflow -n deepflow deepflow/deepflow --create-namespace \
              --set global.allInOneLocalStorage=true \
              --set global.image.repository="ghcr.io/deepflowys/deepflow-ce" \
              -f  manifests/charts/values.yaml
          sudo curl -o /usr/bin/deepflow-ctl https://deepflow-ce.oss-cn-beijing.aliyuncs.com/bin/ctl/latest/linux/amd64/deepflow-ctl
          sudo chmod a+x /usr/bin/deepflow-ctl
          timeout 600 bash -c -- \
             '\
             while true 
               do  
                 kubectl get pods -n deepflow 
                 deepflow-ctl domain list 
                 deepflow-ctl agent list||true 
                 AgentCount=$(deepflow-ctl agent list |wc -l ) 
                    if [ "${AgentCount}" -eq "2" ] 
                      then  
                        echo "All Success." && break 
                      else 
                        echo "Something Wrong,Next loop " && sleep 2 
                    fi 
                for errorPod in $(kubectl get pods -n deepflow|grep "CrashLoopBackOff"|awk "{print $1}")
                  do 
                    kubectl logs -n deepflow $errorPod
                    kubectl delete pod -n deepflow $errorPod
                  done
              done 
            '
            
      - name: logs deepflow
        if: ${{ always() }}
        run: |
          kubectl logs -n deepflow deepflow-server-0  -c deepflow-server 
          kubectl logs -n deepflow -l app=deepflow -l component=deepflow-agent 

  auto_test_upgrade:
    name: auto test upgrade
    needs: [build_server_auto_test_image]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0

      - name: get changes
        run: |
          SERVER_CHANGE_COUNT=$(git diff-tree --no-commit-id --name-only --diff-filter=AMR -r HEAD |grep ^server/|wc -l)
          AGENT_CHANGE_COUNT=$(git diff-tree --no-commit-id --name-only --diff-filter=AMR -r HEAD |grep ^agent/|wc -l)
          MESSAGE_CHANGE_COUNT=$(git diff-tree --no-commit-id --name-only --diff-filter=AMR -r HEAD |grep ^message/|wc -l)
          if [ "${SERVER_CHANGE_COUNT}" -gt "0" ] 
            then  
              echo "SERVER_CHANGE=true" >> $GITHUB_ENV
          fi 
          if [ "${AGENT_CHANGE_COUNT}" -gt "0" ] 
            then  
              echo "AGENT_CHANGE=true" >> $GITHUB_ENV
          fi 
          if [ "${MESSAGE_CHANGE_COUNT}" -gt "0" ] 
            then  
              echo "SERVER_CHANGE=true" >> $GITHUB_ENV
              echo "AGENT_CHANGE=true" >> $GITHUB_ENV
          fi 

      # - name: start minikube
      #   uses: medyagh/setup-minikube@master
      #   with:
      #     minikube-version: 1.24.0
      #     driver: docker
      #     container-runtime: containerd
      #     kubernetes-version: v1.22.3
      #     memory: 4000m
      #     cni: bridge
      - name: Setup Minikube
        uses: manusa/actions-setup-minikube@v2.6.1
        with:
          minikube version: 'v1.26.0'
          kubernetes version: 'v1.24.1'
          github token: ${{ secrets.GITHUB_TOKEN }}
      - name: Interact with the cluster
        run: |
          kubectl get nodes
          kubectl get sc
      # - name: Create k8s Kind Cluster
      #   uses: helm/kind-action@v1.3.0
      - name: Testing
        run: |
          kubectl cluster-info
          kubectl get pods -n kube-system
          kubectl get sc
          echo "current-context:" $(kubectl config current-context)
          echo "environment-kubeconfig:" ${KUBECONFIG}

      - name: Install Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.8.1

      - name: install deepflow
        run: |
          helm repo add deepflow https://deepflowys.github.io/deepflow
          helm repo update deepflow 
          helm install deepflow -n deepflow deepflow/deepflow --create-namespace \
              --set global.allInOneLocalStorage=true \
              --set global.image.repository="ghcr.io/deepflowys/deepflow-ce" \
              -f  manifests/charts/values.yaml
          sudo curl -o /usr/bin/deepflow-ctl https://deepflow-ce.oss-cn-beijing.aliyuncs.com/bin/ctl/latest/linux/amd64/deepflow-ctl
          sudo chmod a+x /usr/bin/deepflow-ctl
          timeout 300 bash -c -- \
             '\
                while true 
                  do 
                    kubectl get pods -n deepflow 
                    set +e
                    kubectl exec -it -n deepflow deploy/deepflow-mysql -- mysql -u root -pdeepflow -e "show tables from deepflow;"|grep vtap
                    if [ $? -eq 0 ] 
                      then
                        set -e
                        helm upgrade deepflow -n deepflow deepflow/deepflow \
                            --set global.allInOneLocalStorage=true \
                            --set global.image.repository="ghcr.io/deepflowys/deepflow-ce" \
                            -f  manifests/charts/values.yaml \
                            --set-string image.server.tag=${{ github.run_id }}
                        break
                    else
                        continue   
                    fi
                  done
            '
          timeout 600 bash -c -- \
             '\
             while true 
               do  
                 kubectl get pods -n deepflow 
                 deepflow-ctl domain list 
                 deepflow-ctl agent list||true 
                 CrashCount=$(deepflow-ctl agent list |wc -l ) 
                    if [ "${CrashCount}" -eq "2" ] 
                      then  
                        echo "All Success." && break 
                      else 
                        echo "Something Wrong,Next loop " && sleep 2 
                    fi 
                for errorPod in $(kubectl get pods -n deepflow|grep "CrashLoopBackOff"|awk "{print $1}")
                  do 
                    kubectl logs -n deepflow $errorPod
                    kubectl delete pod -n deepflow $errorPod
                  done
              done 
            '

      - name: logs deepflow
        if: ${{ always() }}
        run: |
          kubectl logs -n deepflow deepflow-server-0  -c deepflow-server 
          kubectl logs -n deepflow -l app=deepflow -l component=deepflow-agent 


  remove_temp_docker_image:
    name: remove temp docker image
    needs: 
    - auto_test_upgrade
    - auto_test_install
    if: ${{ always() }}
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: clean temp packages use version id
        if: ${{ always() }}
        run: |
          gh api \
          -H "Accept: application/vnd.github+json"  \
          /orgs/deepflowys/packages/container/deepflow-ce%2Fdeepflow-server/versions \
          | jq '.[]|select (.metadata.container.tags[] == "${{ github.run_id }}")|.id'
          PACKAGE_VERSION_ID=$(gh api \
          -H "Accept: application/vnd.github+json"  \
          /orgs/deepflowys/packages/container/deepflow-ce%2Fdeepflow-server/versions \
          | jq '.[]|select (.metadata.container.tags[] == "${{ github.run_id }}")|.id')
          curl -i -X DELETE -H "Accept: application/vnd.github+json" -H "Authorization: token ${{ secrets.DELETE_PACKAGES_TOKEN }}" https://api.github.com/orgs/deepflowys/packages/container/deepflow-ce%2Fdeepflow-server/versions/$PACKAGE_VERSION_ID
        env:
          GITHUB_TOKEN: ${{ secrets.DELETE_PACKAGES_TOKEN }}